services:
  docs-to-ai:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: docs-to-ai
    image: mcp/docs-to-ai

    # Volumes for persistent data
    volumes:
      - ./cache/chromadb:/app/cache/chromadb # chromadb database (persists the vector store)
      - ./cache/doc_cache:/app/cache/doc_cache # Document cache (persists extracted text)
      - ./my-docs:/app/my-docs:ro  # Documents directory (your PDFs and Word docs)# Read-only to prevent accidental modifications

    # Environment variables (optional)
    environment:
      - PYTHONUNBUFFERED=1 # ensures that the python output i.e. the stdout and stderr streams are sent straight to terminal (e.g. your container log) without being first buffered
      - EMBEDDING_MODEL=all-MiniLM-L6-v2
      # Startup behavior control (defaults to True if not set)
      - FULL_SCAN_ON_BOOT=${FULL_SCAN_ON_BOOT:-True}
      - FOLDER_WATCHER_ACTIVE_ON_BOOT=${FOLDER_WATCHER_ACTIVE_ON_BOOT:-True}
      # MCP server transport configuration
      - MCP_TRANSPORT=${MCP_TRANSPORT:-websocket}
      - MCP_HOST=${MCP_HOST:-0.0.0.0}
      - MCP_PORT=${MCP_PORT:-38777}
        
    # Stdin/stdout for MCP protocol (needed for stdio mode)
    stdin_open: true
    tty: true

    # Port mapping for websocket/SSE mode
    ports:
      - "${MCP_PORT:-38777}:38777"

    # Restart policy
    restart: unless-stopped
    
    # Resource limits (optional - adjust based on your needs)
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '2'
    #       memory: 4G
    #     reservations:
    #       cpus: '1'
    #       memory: 2G

    
    # Command can be overridden
    # command: python mcp_server.py
